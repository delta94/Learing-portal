{"ast":null,"code":"var _jsxFileName = \"/Users/ninew/Documents/GitHub/Learing-portal/src/auth/PublicLoginRouter.tsx\";\nimport React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Route } from 'react-router-dom';\nimport { getCookie } from 'cookie/cookie';\nimport { parseJwt } from \"utils/getDataJWT\";\nexport default function PrivateRoute({\n  component: Component,\n  ...rest\n}) {\n  const token = getCookie('token');\n\n  const authed = () => {\n    if (token === null) {\n      return false;\n    }\n\n    if ((token !== \"\" || token !== undefined) && parseJwt(token).role === \"user\") {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => authed() === true ? /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/learning-portal'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 19\n      }\n    }) : /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ninew/Documents/GitHub/Learing-portal/src/auth/PublicLoginRouter.tsx"],"names":["React","Redirect","Route","getCookie","parseJwt","PrivateRoute","component","Component","rest","token","authed","undefined","role","props","pathname"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,eAAe,SAASC,YAAT,CAAsB;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAtB,EAA4E;AAEvF,QAAMC,KAAK,GAAGN,SAAS,CAAC,OAAD,CAAvB;;AAEA,QAAMO,MAAM,GAAG,MAAM;AACjB,QAAID,KAAK,KAAK,IAAd,EAAoB;AAChB,aAAO,KAAP;AACH;;AACD,QAAI,CAACA,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAKE,SAA3B,KAAyCP,QAAQ,CAACK,KAAD,CAAR,CAAgBG,IAAhB,KAAyB,MAAtE,EAA8E;AAC1E,aAAO,IAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAP;AACH;AACJ,GAVD;;AAYA,sBACI,oBAAC,KAAD,oBACQJ,IADR;AAGI,IAAA,MAAM,EAAGK,KAAD,IAAYH,MAAM,OAAO,IAAd,gBACb,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEI,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa,gBAEb,oBAAC,SAAD,oBAAeD,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAUH","sourcesContent":["import React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Route } from 'react-router-dom'\nimport { PrivateRouteProps } from './typescripts'\nimport { getCookie } from 'cookie/cookie'\nimport { parseJwt } from \"utils/getDataJWT\"\nexport default function PrivateRoute({ component: Component, ...rest }: PrivateRouteProps) {\n\n    const token = getCookie('token');\n\n    const authed = () => {\n        if (token === null) {\n            return false\n        }\n        if ((token !== \"\" || token !== undefined) && parseJwt(token).role === \"user\") {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    return (\n        <Route\n            {...rest}\n\n            render={(props) => (authed() === true)\n                ? <Redirect to={{ pathname: '/learning-portal' }} />\n                : <Component {...props} />\n            }\n        />\n    )\n}"]},"metadata":{},"sourceType":"module"}