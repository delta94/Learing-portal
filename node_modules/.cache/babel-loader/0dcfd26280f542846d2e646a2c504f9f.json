{"ast":null,"code":"import axios from \"axios\";\nimport { getCookie } from 'cookie/cookie';\nimport * as infoactions from \"modules/infomation/actions\";\nconst LOAD_PUT_REQUEST = \"learning-portal/src/ui/LOAD_PUT_REQUEST\";\nconst LOAD_PUT_SUCCESS = \"learning-portal/src/ui/LOAD_PUT_SUCCESS\";\nconst LOAD_PUT_FAILURE = \"learning-portal/src/ui/LOAD_PUT_REQUEST\";\n\nfunction loadPUT(updateInfo) {\n  return async dispatch => {\n    dispatch({\n      type: LOAD_PUT_REQUEST\n    });\n\n    try {\n      const id = getCookie('id');\n      const token = getCookie('token');\n      const data = await axios.put(`/Users/${id}/Password`, updateInfo, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      dispatch({\n        type: LOAD_PUT_SUCCESS,\n        payload: {\n          message: \"แก้ไขรหัสผ่านเรียบร้อยเเล้ว\",\n          data: data.data,\n          status: data.status\n        }\n      });\n      const action = infoactions.loadMessage(\"แก้ไขรหัสผ่านเรียบร้อยเเล้ว\", \"success\");\n      dispatch(action);\n    } catch (err) {\n      dispatch({\n        type: LOAD_PUT_FAILURE,\n        payload: {\n          message: \"เกิดข้อผิดพลาด\",\n          staus: err.response.status\n        }\n      });\n\n      if (err.response.status === 401) {\n        const action = infoactions.loadMessage(\"รหัสผ่านเดิมไม่ถูกต้อง\", \"error\");\n        dispatch(action);\n      } else {\n        const action = infoactions.loadMessage(`เกิดข้อผิดพลาดในการแก้ไขรหัสผ่าน ${err.response.status}`, \"error\");\n        dispatch(action);\n      }\n    }\n  };\n}\n\nexport { LOAD_PUT_REQUEST, LOAD_PUT_SUCCESS, LOAD_PUT_FAILURE, loadPUT };","map":{"version":3,"sources":["/Users/ninew/Documents/GitHub/Learing-portal/src/modules/resetPortal/actions.tsx"],"names":["axios","getCookie","infoactions","LOAD_PUT_REQUEST","LOAD_PUT_SUCCESS","LOAD_PUT_FAILURE","loadPUT","updateInfo","dispatch","type","id","token","data","put","headers","Authorization","payload","message","status","action","loadMessage","err","staus","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAO,KAAKC,WAAZ,MAA6B,4BAA7B;AAEA,MAAMC,gBAAgB,GAAG,yCAAzB;AACA,MAAMC,gBAAgB,GAAG,yCAAzB;AACA,MAAMC,gBAAgB,GAAG,yCAAzB;;AAEA,SAASC,OAAT,CAAiBC,UAAjB,EAAkC;AAC9B,SAAO,MAAOC,QAAP,IAAyB;AAC5BA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,YAAMO,EAAE,GAAGT,SAAS,CAAC,IAAD,CAApB;AACA,YAAMU,KAAK,GAAGV,SAAS,CAAC,OAAD,CAAvB;AACA,YAAMW,IAAI,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAW,UAASH,EAAG,WAAvB,EAAmCH,UAAnC,EAA+C;AAC9DO,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAELC,UAAAA,aAAa,EAAG,UAASJ,KAAM;AAF1B;AADqD,OAA/C,CAAnB;AAMAH,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEL,gBADD;AAELY,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,6BADJ;AAELL,UAAAA,IAAI,EAAEA,IAAI,CAACA,IAFN;AAGLM,UAAAA,MAAM,EAAEN,IAAI,CAACM;AAHR;AAFJ,OAAD,CAAR;AAQA,YAAMC,MAAM,GAAGjB,WAAW,CAACkB,WAAZ,CAAwB,6BAAxB,EAAuD,SAAvD,CAAf;AACAZ,MAAAA,QAAQ,CAACW,MAAD,CAAR;AACH,KAnBD,CAmBE,OAAOE,GAAP,EAAY;AACVb,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEJ,gBADD;AAELW,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,gBADJ;AAELK,UAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaL;AAFf;AAFJ,OAAD,CAAR;;AAOA,UAAIG,GAAG,CAACE,QAAJ,CAAaL,MAAb,KAAwB,GAA5B,EAAiC;AAC7B,cAAMC,MAAM,GAAGjB,WAAW,CAACkB,WAAZ,CAAwB,wBAAxB,EAAkD,OAAlD,CAAf;AACAZ,QAAAA,QAAQ,CAACW,MAAD,CAAR;AACH,OAHD,MAIK;AAED,cAAMA,MAAM,GAAGjB,WAAW,CAACkB,WAAZ,CAAyB,oCAAmCC,GAAG,CAACE,QAAJ,CAAaL,MAAO,EAAhF,EAAmF,OAAnF,CAAf;AACAV,QAAAA,QAAQ,CAACW,MAAD,CAAR;AAEH;AAGJ;AACJ,GA1CD;AA2CH;;AAED,SACIhB,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,OAJJ","sourcesContent":["import axios from \"axios\";\nimport { getCookie } from 'cookie/cookie'\nimport * as infoactions from \"modules/infomation/actions\"\n\nconst LOAD_PUT_REQUEST = \"learning-portal/src/ui/LOAD_PUT_REQUEST\";\nconst LOAD_PUT_SUCCESS = \"learning-portal/src/ui/LOAD_PUT_SUCCESS\";\nconst LOAD_PUT_FAILURE = \"learning-portal/src/ui/LOAD_PUT_REQUEST\";\n\nfunction loadPUT(updateInfo: any) {\n    return async (dispatch: any) => {\n        dispatch({ type: LOAD_PUT_REQUEST });\n        try {\n            const id = getCookie('id')\n            const token = getCookie('token')\n            const data = await axios.put(`/Users/${id}/Password`, updateInfo, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n            dispatch({\n                type: LOAD_PUT_SUCCESS,\n                payload: {\n                    message: \"แก้ไขรหัสผ่านเรียบร้อยเเล้ว\",\n                    data: data.data,\n                    status: data.status\n                },\n            });\n            const action = infoactions.loadMessage(\"แก้ไขรหัสผ่านเรียบร้อยเเล้ว\", \"success\")\n            dispatch(action)\n        } catch (err) {\n            dispatch({\n                type: LOAD_PUT_FAILURE,\n                payload: {\n                    message: \"เกิดข้อผิดพลาด\",\n                    staus: err.response.status\n                },\n            });\n            if (err.response.status === 401) {\n                const action = infoactions.loadMessage(\"รหัสผ่านเดิมไม่ถูกต้อง\", \"error\")\n                dispatch(action)\n            }\n            else {\n\n                const action = infoactions.loadMessage(`เกิดข้อผิดพลาดในการแก้ไขรหัสผ่าน ${err.response.status}`, \"error\")\n                dispatch(action)\n\n            }\n\n\n        }\n    };\n}\n\nexport {\n    LOAD_PUT_REQUEST,\n    LOAD_PUT_SUCCESS,\n    LOAD_PUT_FAILURE,\n    loadPUT,\n};\n"]},"metadata":{},"sourceType":"module"}