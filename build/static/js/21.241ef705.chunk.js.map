{"version":3,"sources":["modules/portal/components/TabPlanel.tsx","modules/portal/components/Dialog.tsx","modules/portal/components/LinkPortal.tsx"],"names":["TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","AlertDialog","open","setOpen","data","handleClose","Dialog","onClose","aria-describedby","DialogTitle","officialName","DialogContent","DialogContentText","link","DialogActions","Button","onClick","color","window","autoFocus","useStyles","makeStyles","theme","root","flexGrow","marginTop","width","rounded","spacing","height","small","margin","title","fontSize","fontWeight","content","alignContent","icon","center","VariantAvatars","classes","React","useState","setValue","setData","useTheme","tabsStyles","appleTabsStylesHook","useTabs","tabItemStyles","useTabItem","useEffect","a","axios","get","fetch","handleClickOpen","handleChange","event","newValue","className","Tabs","style","backgroundColor","onChange","variant","scrollButtons","TabIndicatorProps","background","indicatorColor","undefined","textColor","map","item","Tab","key","Avatar","alt","src","thumbnail","axis","direction","onChangeIndex","dir"],"mappings":"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","file":"static/js/21.241ef705.chunk.js","sourcesContent":["import React from 'react';\nimport Box from '@material-ui/core/Box';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  dir?: string;\n  index: any;\n  value: any;\n}\n\nexport default function TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n       {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nexport default function AlertDialog(props: any) {\n  const { open, setOpen, data } = props;\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleAgree = () => {\n    if (data !== null) {\n      window.open(`${data.link}`, \"_blank\");\n      setOpen(false);\n    }\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {`กำลังเข้าสู่ ${data ? data.officialName : \"กำลังโหลดข้อมูล\"}`}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {`คุณกำลังเข้าสู่ เว็บ ${\n              data ? data.link : \"\"\n            } หากต้องการเข้าสู่เว็บไซต์นี้กดตกลงหากไม่ต้องการกดกลับ`}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            กลับ\n          </Button>\n          <Button onClick={handleAgree} color=\"primary\" autoFocus>\n            ตกลง\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { Tabs, Tab, Avatar } from \"@material-ui/core\";\n//@ts-ignore\nimport SwipeableViews from \"react-swipeable-views\";\nimport TabPanel from \"./TabPlanel\";\nimport axios from \"axios\";\nimport Dialog from \"./Dialog\";\nimport { appleTabsStylesHook } from \"@mui-treasury/styles/tabs\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginTop: 8,\n    width: \"100%\",\n  },\n  rounded: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n  small: {\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    margin: 8,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 900,\n  },\n  content: {\n    fontSize: 14,\n    fontWeight: 500,\n    alignContent: \"center\",\n  },\n  icon: {\n    fontSize: 24,\n    margin: 4,\n  },\n  center: {\n    alignContent: \"center\",\n  },\n}));\n\nexport default function VariantAvatars() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const [open, setOpen] = React.useState(false);\n  const [data, setData] = useState<any>([]);\n  const theme = useTheme();\n  const tabsStyles = appleTabsStylesHook.useTabs();\n  const tabItemStyles = appleTabsStylesHook.useTabItem();\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await axios.get(\"/Platforms\");\n      setData(data);\n    };\n    fetch();\n  }, []);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue);\n  };\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Tabs\n          value={value}\n          classes={tabsStyles}\n          style={{ backgroundColor: \"transparent\" }}\n          onChange={handleChange}\n          variant=\"scrollable\"\n          scrollButtons=\"on\"\n          TabIndicatorProps={{\n            style: {\n              background: \"none\",\n            },\n          }}\n          indicatorColor={undefined}\n          textColor=\"primary\"\n        >\n          {data.map((item: any, index: number) => (\n            <Tab\n              key={index}\n              classes={tabItemStyles}\n              onClick={handleClickOpen}\n              icon={\n                <Avatar\n                  alt=\"Remy Sharp\"\n                  src={item.thumbnail}\n                  className={classes.rounded}\n                />\n              }\n            />\n          ))}\n        </Tabs>\n        <SwipeableViews\n          axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n          index={value}\n          onChangeIndex={handleChange}\n        >\n          {data.map((item: any, index: number) => (\n            <TabPanel\n              value={value}\n              index={index}\n              dir={theme.direction}\n              key={index}\n            >\n              <Dialog open={open} setOpen={setOpen} data={item} />\n            </TabPanel>\n          ))}\n        </SwipeableViews>\n      </div>\n    </>\n  );\n}\n\n/*\n\nfunction a11yProps(index: any) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    width: 500,\n  },\n}));\n\nexport default function FullWidthTabs() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n\n\n  const handleChangeIndex = (index: number) => {\n    setValue(index);\n  };\n\n  return (\n\n\n      <SwipeableViews\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabPanel value={value} index={0} dir={theme.direction}>\n          Item One\n        </TabPanel>\n      </SwipeableViews>\n\n  );\n}\n*/\n"],"sourceRoot":""}